---
- name: check for the {{ podman_webserver }}.service file
  stat:
    path: "{{ podman_webserver }}"
  register: systemd_file

- name: stop and disable the {{ podman_webserver }}.service
  systemd:
    name: "{{ podman_webserver }}.service"
    enabled: no
    state: stopped
  when: systemd_file.stat.exists == True

- name: reload systemd
  systemd:
    daemon_reload: yes
  when: remove_service.changed

- name: get container {{ podman_webserver }} uuid
  shell: podman ps -a | awk '/{{ podman_webserver }}/ {print $1}'
  register: container_uuid
  ignore_errors: yes

- name: ensure the {{ podman_webserver }} container is removed
  #command: podman container rm -f {{ podman_webserver }}
  command: >
    podman stop {{ container_uuid.stdout }}
    podman container rm --force --storage {{ container_uuid.stdout }}
  ignore_errors: yes
  register: remove_webserver
  when: container_exist|bool

- name: ensure the webserver cotainer image is removed
  command: podman rmi {{ podman_webserver_image.stdout }}
  ignore_errors: yes
  when: podman_webserver_image is defined and podman_webserver_image.stdout != ''

- name: remove the directory {{ webserver_directory }}
  file:
    path: "{{ webserver_directory }}"
    state: absent
  when: (remove_webserver is defined and remove_webserver.rc is defined and remove_webserver.rc == 0) or (not container_exist|bool)

- name: remove the {{ podman_webserver }}.service file
  file:
    path: "/etc/systemd/system/{{ podman_webserver }}.service"
    state: absent
  register: remove_service
  when: (remove_webserver is defined and remove_webserver.rc is defined and remove_webserver.rc == 0) or (not container_exist|bool)

- fail:
    msg: "Unable to delete {{ podman_webserver }}, either reboot or try to remove it"
  when: (remove_webserver is defined and remove_webserver.rc is defined and remove_webserver.rc != 0) or (container_exist|bool)
